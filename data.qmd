---
title: "Data"
format:
  html: 
    toc: true
    toc-depth: 2
acronyms:
  loa_title: "List of Acronyms"
  include_unused: false
  insert_loa: "end"
  insert_links: true
  id_prefix: "acronyms_"
  sorting: "alphabetical"
  non_existing: "key"
  # style: "long-short"
  loa_format: '`**{shortname}**: {longname}`{=raw}'
  loa_header_classes:
  - unnumbered
  fromfile:
    - _acronyms.yml
---

## Data for modeling

We propose two data sets:

1. a flight list of (a subset of) flights flown in Europe in 2022
1. the relevant trajectories for the above flights

The data sets for the challenge are organized as follows:

```text
competition-data/
├── challenge_set.csv
├── submission_set.csv
├── 2022-01-01.parquet
├── 2022-01-02.parquet
└── ...
```

Each daily trajectory parquet file contains (\acr{ADS-B} based) flown trajectories
augmented with meteo information[^1].

[^1]: from [Google's Analysis-Ready, Cloud Optimized (ARCO) ERA5][google-era5]:  
ERA5 is the fifth generation of the [\acr{ECMWF}][ecmwf]
Atmospheric Reanalysis, providing hourly estimates of a large number of atmospheric, land, and oceanic climate variables.  
The Google Cloud Public Dataset Program hosts ERA5 data that spans from 1940 to recent days,
covering the Earth on a 30 km grid and resolves the atmosphere using 137 levels from
the surface up to a height of 80 km.

[google-era5]: <https://cloud.google.com/storage/docs/public-datasets/era5> "Google's ERA5"
[ecmwf]: <https://www.ecmwf.int/>



### Flight List
The flight list provides details such as (`column names` in parenthesis, [_units_]
in italic in square brackets when appropriate):

* flight identification: unique ID (`flight_id`), (obfuscated) callsign (`callsign`)
* origin/destination: \acr{ADEP} (`adep` [_ICAO code_]), \acr{ADES} (`ades` [_ICAO code_])
  and ancillary info, i.e. airport name (`name_adep`, `name_ades`) and country code 
  (`country_code_adep`, `country_code_ades` [_ISO2C_])
* timing: date of flight (`date` [_ISO 8601 UTC date_]),
  \acr{AOBT} (`actual_offblock_time` [_ISO 8601 UTC date and time_]),
  \acr{ARVT} (`arrival_time` [_ISO 8601 UTC date and time_);
  \acr{AOBT} and \acr{ARVT} from \acr{NM}
* aircraft: aircraft type code (`aircraft_type` [_ICAO aircraft type_]),
  \acr{WTC} (`wtc`); see [ICAO aircraft type designator page][act_type]
* airline: (obfuscated) \acr{AO} code (`airline`), 
* operational values: flight duration (`flight_duration` [_min_]) , 
  taxi-out time (`taxiout_time` [_min_]),
  route length (`flown_distance` [_nmi_]) , (estimated) \acr{TOW} (`tow` [_kg_]) 

[act_type]: <https://www.icao.int/publications/DOC8643/Pages/Search.aspx> "Aircraft type"

### Trajectory
The trajectory contains

* flight identification: unique ID (`flight_id`, same as for flight list)
* 4D position: `longitude` [_DD_, decimal degrees in -90/90 range] and
  `latitude` [_DD_, decimal degrees in -180/180 range],
  `altitude` [_ft_], `timestamp` [_timestamp with time zone_]
* speed: ground speed (`groundspeed` [_kt_]), 
  track angle (`track` and `track_unwrapped` [_decimal degrees_]),
  vertical rate of climb/descent (`vertical_rate` [_ft/min_])
* (optionally) meteo info at 4D position:
  - wind (`u_component_of_wind` and `v_component_of_wind`) [_m/s_]
  - `temperature` [$K$, kelvin]

### Rationale for the data sets

Our gut feelings say that \acr{ATOW} depends in some forms from:

* origin/destination: the great circle distance is of course a factor in terms of how much fuel
  you will have to tank and hence the take-off weight.  
  Also \acr{ADEP} or \acr{ADES} are important because of specific local procedures.  
  \acr{ADEP}/\acr{ADES} could also be important because different
  \acr{AO}s plan and execute flights differently for/to the same airport.
* timing: when you execute a flight, i.e. morning/evening/night, weekly patterns,
  seasonal trends, local time (?),
  flight duration calculation, could be a factor to consider
* aircraft: of course the (ICAO) type will imply different amounts of fuel needed,
* airline: policies varies, for example for same city-pair an airline could select different
  alternates according to their technical support facilities/contracts.  
  Also \acr{AO}s have different tanking policies.
* operational: flown route length (different from great circle distance) could better refine
  \acr{ATOW} estimation; same for taxi-out duration
* trajectory: The \acr{ADS-B} trajectory can help to classify the way a flight has been flown and
  hence refine the \acr{ATOW} estimate


## Dataset for submission

The submission template file, `competition-data/submission_set.csv`, contains
the list of flight IDs for which to estimate the TOW; it is .

  ```
  flight_id, tow
  258081039,
  258081111,
  ...
  ```
  
The relevant trajectories are part of the ones provided in the Trajectory
dataset.



## Where/How to get the Datasets

The dataset files are hosted on \acr{OSN} infrastructure.  
Upon registration of your team you should have received the relevant
  * team name/ID, i.e. `cucu`
  * `ACCESS_KEY` and `SECRET_KEY`.  

Below you can find the details on how to access the data sets and submit your
results for ranking.

### Using MinIO Client

#### Pre-requisites
The steps below have been executed on a MBR/macOS machine but it should be easy
to apply them to other Unix-like environments (we did similarly on MS Windows via
Git Bash.)

1. Install [MinIO Client][mc] for your [OS/environment][install]:  
  
    ```
    $ brew install minio/stable/mc
    ```

1. Set an alias up for the challenge data location:
  
    ```
    $ mc alias set dc24 \
      https://s3.opensky-network.org/ \
      ACCESS_KEY SECRET_KEY
    ```

#### Read/Write data
From the command line you can

1. Listed the competition buckets
  
    ```
    $ mc ls dc24
    [2024-07-05 04:05:29 CEST]     0B competition-data/
    [2024-07-08 06:10:23 CEST]     0B submissions/
    $ mc ls dc24/competition-data/
    [2024-07-10 10:58:23 CEST]  12MiB STANDARD 2022-01-01.parquet
    [2024-07-10 10:58:34 CEST]  19MiB STANDARD 2022-01-02.parquet
    ...
    [2024-07-11 12:41:20 CEST] 164MiB STANDARD challenge_set.csv
    [2024-07-11 12:42:43 CEST] 1.1MiB STANDARD submission_set.csv
    ```

1. list the content of the (read-only) `competition-data/` bucket
  
    ```
    $ mc ls dc24/competition-data/
    [2024-07-10 10:58:23 CEST]  12MiB STANDARD 2022-01-01.parquet
    [2024-07-10 10:58:34 CEST]  19MiB STANDARD 2022-01-02.parquet
    ...
    [2024-07-11 12:41:20 CEST] 164MiB STANDARD challenge_set.csv
    [2024-07-11 12:42:43 CEST] 1.1MiB STANDARD submission_set.csv
    ```

1. copy Jan 2022 trajectory files from the (read-only) `competition-data/` bucket
  
    ```
    $ mc cp --recursive dc24/competition-data/2022-01 my-local-directory/
    ```

1. copy all files from the (read-only) `competition-data/` bucket
  
    ```
    $ mc cp --recursive dc24/competition-data/  my-local-directory/
    ```

1. Write your team's submission (assuming team name `cucu`) to the
  `submissions/` bucket
  
    ```
    $ mc cp ./my_submission.csv  dc24/submissions/"cucu_submission_$(date +%s).csv"
    ```

**NOTE**: no team can list the content of the `submissions/` bucket; and team
`cucu`  can only submit files in the format `cucu_submission_<posix timestamp>.csv`

[mc]: <https://min.io/docs/minio/linux/reference/minio-mc.html#> "MinIO Client"
[install]: <https://min.io/docs/minio/linux/reference/minio-mc.html#install-mc> "mc install"


### Using Python

#### Pre-requisites
You need to have [`pyopensky`][posn] installed as detailed [here][posninstall].

Also your configuration files should contain the relevant values for 
`ACCESS_KEY` and `SECRET_KEY`

```
[default]
username = your_osn_user
password = ...

access_key = ACCESS_KEY
secret_key = SECRET_KEY
```

[posn]: <https://github.com/open-aviation/pyopensky> "pyopensky Python library"
[posninstall]: <https://open-aviation.github.io/pyopensky/installation.html> "Installation of pyopensky"


#### Read/Write Data
The following code allows to download the challenge files

```python
from pyopensky.s3 import S3Client

s3 = S3Client()

for obj in s3.s3client.list_objects("competition-data", recursive=True):
     print(f"{obj.bucket_name=}, {obj.object_name=}")
     s3.download_object(obj)
```

## Ranking
For ranking you'll need to upload your
`<team>_submission_<posix timestamp>.csv`  file with the estimated TOWs.

The RANKING PAGE will be automatically updated after few instants.

## Eligibility for Prize

The winning solutions will only be eligible for the awards if all source code
and additional data sets used to generate the results from the measurement data
will be made available to be published under the **GNU GPLv3 license** on the
OpenSky Network's github account.

In addition, sufficient documentation must be provided to understand and
reproduce the results.
